[1218/100357.887:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100357.887:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" --disable-d3d11 --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,10,16,19,23,41,61,74 --disable-gl-extensions="GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent" --gpu-vendor-id=0x8086 --gpu-device-id=0x0046 --gpu-driver-vendor="Intel Corporation" --gpu-driver-version=8.15.10.2900 --gpu-driver-date=11-26-2012 --gpu-secondary-vendor-ids=0x10de --gpu-secondary-device-ids=0x0a6c --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100358.364:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/100358.580:INFO:cef_log.cpp(8)] [Browser process] QuitMessageLoop()

[1218/100358.580:INFO:cef_log.cpp(8)] [Browser process] Shutdown()

[1218/100358.783:INFO:cef_log.cpp(8)] [Browser process] CefShutdown()

[1218/100431.764:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100431.764:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" --disable-d3d11 --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,10,16,19,23,41,61,74 --disable-gl-extensions="GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent" --gpu-vendor-id=0x8086 --gpu-device-id=0x0046 --gpu-driver-vendor="Intel Corporation" --gpu-driver-version=8.15.10.2900 --gpu-driver-date=11-26-2012 --gpu-secondary-vendor-ids=0x10de --gpu-secondary-device-ids=0x0a6c --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100431.942:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/100432.154:INFO:cef_log.cpp(8)] [Browser process] QuitMessageLoop()

[1218/100432.154:INFO:cef_log.cpp(8)] [Browser process] Shutdown()

[1218/100432.358:INFO:cef_log.cpp(8)] [Browser process] CefShutdown()

[1218/100459.447:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100459.448:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=gpu-process --no-sandbox --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" --disable-d3d11 --supports-dual-gpus=false --gpu-driver-bug-workarounds=7,10,16,19,23,41,61,74 --disable-gl-extensions="GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent" --gpu-vendor-id=0x8086 --gpu-device-id=0x0046 --gpu-driver-vendor="Intel Corporation" --gpu-driver-version=8.15.10.2900 --gpu-driver-date=11-26-2012 --gpu-secondary-vendor-ids=0x10de --gpu-secondary-device-ids=0x0a6c --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:2

[1218/100459.788:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/100500.088:INFO:cef_log.cpp(8)] [Browser process] CreateBrowserSync() called

[1218/100500.119:INFO:cef_log.cpp(8)] [Browser process] navigateUrl: data:text/html;base64,

[1218/100500.269:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync()

[1218/100500.348:INFO:lifespan_handler.cpp(41)] [Browser process] OnAfterCreated(): auto_zooming = system_dpi

[1218/100500.375:INFO:dpi_aware.cpp(210)] [Browser process] SetBrowserDpiSettings(): DPI=96 zoom=0

[1218/100500.376:INFO:cef_log.cpp(8)] [Browser process] GetPyBrowser(): create new PyBrowser, browserId=1

[1218/100500.442:INFO:cefpython_app.cpp(132)] [Browser process] OnBeforeChildProcessLaunch() command line: "D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\subprocess" --type=renderer --no-sandbox --disable-databases --primordial-pipe-token=690BA453D606B49C725DEFEC89FDFA40 --lang=en-US --lang=en-US --locales-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3\locales" --log-file=debug.log --log-severity=info --resources-dir-path="D:\Dateien\Programme\Anaconda\lib\site-packages\cefpython3" /prefetch:1

[1218/100500.456:INFO:cef_log.cpp(8)] [Browser process] CefBrowser::CreateBrowserSync() succeeded

[1218/100500.457:INFO:cef_log.cpp(8)] [Browser process] CefBrowser window handle = 3540418

[1218/100500.457:INFO:cef_log.cpp(8)] [Browser process] MessageLoop()

[1218/100500.641:INFO:cefpython_app.cpp(207)] [Renderer process] OnContextCreated()

[1218/100500.641:INFO:client_handler.cpp(39)] [Browser process] OnProcessMessageReceived(): OnContextCreated

[1218/100500.641:INFO:cef_log.cpp(8)] [Browser process] V8ContextHandler_OnContextCreated()

[1218/100500.663:INFO:cefpython_app.cpp(255)] [Renderer process] OnContextReleased()

[1218/100500.664:INFO:client_handler.cpp(39)] [Browser process] OnProcessMessageReceived(): OnContextReleased

[1218/100500.664:INFO:cef_log.cpp(8)] [Browser process] V8ContextHandler_OnContextReleased()

[1218/100500.664:INFO:cef_log.cpp(8)] [Browser process] del g_pyFrames[1#2]

[1218/100500.664:INFO:client_handler.cpp(39)] [Browser process] OnProcessMessageReceived(): RemovePythonCallbacksForFrame

[1218/100500.668:INFO:cefpython_app.cpp(207)] [Renderer process] OnContextCreated()

[1218/100500.668:INFO:client_handler.cpp(39)] [Browser process] OnProcessMessageReceived(): OnContextCreated

[1218/100500.668:INFO:cef_log.cpp(8)] [Browser process] V8ContextHandler_OnContextCreated()

[1218/100538.734:INFO:cef_log.cpp(8)] [Browser process] LifespanHandler_OnBeforeClose

[1218/100538.734:INFO:cef_log.cpp(8)] [Browser process] del g_pyFrames[1#-4]

[1218/100538.734:INFO:cef_log.cpp(8)] [Browser process] del g_pyFrames[1#2]

[1218/100538.734:INFO:cef_log.cpp(8)] [Browser process] del g_pyBrowsers[1]

[1218/100538.734:INFO:cef_log.cpp(8)] [Browser process] QuitMessageLoop()

[1218/100538.765:INFO:cef_log.cpp(8)] [Browser process] Shutdown()

[1218/100538.967:INFO:cef_log.cpp(8)] [Browser process] CefShutdown()

[1218/100548.040:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/101059.375:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/101203.318:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/101519.578:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/101659.589:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/111751.966:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112006.384:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112201.277:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112317.234:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112510.631:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112716.644:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112808.805:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/112854.477:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113003.902:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113039.726:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113142.522:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113235.400:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113317.378:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113337.492:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113503.012:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113538.822:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113548.719:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/113753.254:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115042.220:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115340.744:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115412.465:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115524.025:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115542.693:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115631.041:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115649.497:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/115729.871:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/140258.071:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/140333.581:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/140531.956:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/170029.335:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/170127.464:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/170619.579:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/170847.860:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/171557.023:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/173136.628:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/173329.011:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/192441.818:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/192706.547:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/193301.052:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/193553.434:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/193740.141:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/194053.123:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/194534.904:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/203711.805:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/204428.679:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/204825.124:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
[1218/205056.542:ERROR:child_thread_impl.cc(762)] Request for unknown Channel-associated interface: ui::mojom::GpuMain
